import {
  Action,
  As,
  Bfile,
  Bigint,
  Binary,
  Binary_double,
  Binary_float,
  Bit,
  Blob,
  Bool,
  Boolean as BooleanToken,
  Cascade,
  Char,
  Clob,
  Color,
  Cursor,
  Database_type,
  Date,
  Datetime,
  Datetime2,
  Datetimeoffset,
  Dec,
  Decimal,
  Default,
  Delete,
  Double,
  Enum,
  False,
  Float,
  Headercolor,
  Image,
  Increment,
  Indexes,
  Inet6,
  Int,
  Integer,
  Key,
  Longblob,
  Longtext,
  Mediumblob,
  Mediumint,
  Mediumtext,
  Money,
  Name,
  Nchar,
  Nclob,
  No,
  Not,
  Note,
  Ntext,
  Null,
  Nvarchar,
  Nvarchar2,
  Pk,
  Primary,
  Project,
  Raw,
  Real,
  Ref,
  Restrict,
  Set as SetToken,
  Smalldatetime,
  Smallint,
  Smallmoney,
  Sql_variant,
  Table,
  TableGroup,
  TablePartial,
  Text,
  Time,
  Timestamp,
  Tinyblob,
  Tinyint,
  Tinytext,
  True,
  Type,
  Unique,
  Uniqueidentifier,
  Update,
  Uuid,
  Varbinary,
  Varchar,
  Varchar2,
  Xml,
  Year,
} from "./lezer-parser.terms.ts";

const keywordMap: Record<string, number> = {
  // Main declaration keywords
  project: Project,
  tablegroup: TableGroup,
  table: Table,
  tablepartial: TablePartial,
  enum: Enum,

  // Common keywords
  database_type: Database_type,
  note: Note,
  as: As,
  ref: Ref,
  type: Type,
  delete: Delete,
  update: Update,
  cascade: Cascade,
  restrict: Restrict,
  set: SetToken,
  no: No,
  action: Action,

  // Column settings
  pk: Pk,
  unique: Unique,
  null: Null,
  not: Not,
  increment: Increment,
  default: Default,

  // Setting names
  indexes: Indexes,
  headercolor: Headercolor,
  primary: Primary,
  key: Key,
  name: Name,
  color: Color,

  // Bool
  true: True,
  false: False,

  // Numeric data types
  integer: Integer,
  tinyint: Tinyint,
  smallint: Smallint,
  mediumint: Mediumint,
  int: Int,
  bigint: Bigint,
  float: Float,
  double: Double,
  decimal: Decimal,
  dec: Dec,
  bit: Bit,
  bool: Bool,
  real: Real,
  money: Money,
  binary_float: Binary_float,
  binary_double: Binary_double,
  smallmoney: Smallmoney,

  // String data types
  char: Char,
  binary: Binary,
  varchar: Varchar,
  varbinary: Varbinary,
  tinyblob: Tinyblob,
  tinytext: Tinytext,
  blob: Blob,
  text: Text,
  mediumblob: Mediumblob,
  mediumtext: Mediumtext,
  longblob: Longblob,
  longtext: Longtext,
  inet6: Inet6,
  uuid: Uuid,
  nvarchar: Nvarchar,
  nchar: Nchar,
  ntext: Ntext,
  image: Image,
  varchar2: Varchar2,
  nvarchar2: Nvarchar2,

  // Date/Time data types
  date: Date,
  time: Time,
  datetime: Datetime,
  datetime2: Datetime2,
  timestamp: Timestamp,
  year: Year,
  smalldatetime: Smalldatetime,
  datetimeoffset: Datetimeoffset,

  // Other data types
  xml: Xml,
  sql_variant: Sql_variant,
  uniqueidentifier: Uniqueidentifier,
  cursor: Cursor,
  bfile: Bfile,
  clob: Clob,
  nclob: Nclob,
  raw: Raw,
  boolean: BooleanToken,
};

// @ts-expect-error Unused `stack` to match the signature of the generated parser
export const keywords = (token: string, stack: unknown) => {
  const found = keywordMap[token.toLowerCase()];
  return found == null ? -1 : found;
};
